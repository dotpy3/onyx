<?php

namespace SDF\BilletterieBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
	/**
	 * Find a user instance from a username in the EntityRepository.
	 *
	 * @param string $username
	 * @return User
	 */
	public function loadUserByUsername($username)
	{
		$user = null;

		$qb = $this->createQueryBuilder('u');

		$qb->where($qb->expr()->orX(
				$qb->expr()->eq('u.username', ':username'),
				$qb->expr()->eq('u.email', ':username')
			))
			->setParameter('username', $username)
		;

		try {
			$user = $qb->getQuery()->getSingleResult();
		}
		catch (NoResultException $e) {
			throw new UsernameNotFoundException(sprintf('Ce nom d\'utilisateur est inconnu : "%s".', $username), 0, $e);
		}

		return $user;
	}

	/**
	 * Refresh the given user instance from EntityRepository.
	 *
	 * @param UserInterface $user
	 * @return User
	 */
	public function refreshUser(UserInterface $user)
	{
		if (!$this->supportsClass(get_class($user))) {
			throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user));
		}

		return $this->find($user->getId());
	}

	/**
	 * Define if a given classname is a subclass of this entity or not.
	 *
	 * @param string $class
	 * @return boolean
	 */
	public function supportsClass($class)
	{
		return ($class === $this->getEntityName() || is_subclass_of($class, $this->getEntityName()));
	}
}
